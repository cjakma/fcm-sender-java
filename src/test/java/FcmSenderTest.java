import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import exception.ValidationException;
import model.DownstreamHttpData;
import model.DownstreamHttpMessages;
import model.DownstreamHttpNotificationAndroid;
import model.DownstreamHttpResponse;
import util.CollectionUtil;
import util.EnvironmentVariableManager;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'jason' at '12/23/16 12:56 AM' with Gradle 3.1
 *
 * @author jason, @date 12/23/16 12:56 AM
 */
@RunWith(JUnit4.class)
public class FcmSenderTest {

  private static final Logger LOGGER = LoggerFactory.getLogger(FcmSenderTest.class);

  private final String authKeyForTest =
      EnvironmentVariableManager.getEnvironmentVariable("AUTH_KEY_TEST");
  private final String registrationIdForTest =
      EnvironmentVariableManager.getEnvironmentVariable("REGISTRATION_ID_TEST");

  @Rule public ExpectedException thrown = ExpectedException.none();

  private DownstreamHttpNotificationAndroid getDownstreamHttpNotificationAndroid() {
    final String notificationTitle = "Hello";
    final String notificationBody = "This is test notification!";
    DownstreamHttpNotificationAndroid downstreamHttpNotificationAndroid =
        DownstreamHttpNotificationAndroid.builder()
            .setTitle(notificationTitle)
            .setBody(notificationBody)
            .build();

    return downstreamHttpNotificationAndroid;
  }

  private DownstreamHttpData getDownstreamHttpData() {
    return new DownstreamHttpDataTest("Jason", "100");
  }

  @Test
  public void sendNotification() throws Exception {
    DownstreamHttpMessages downstreamHttpMessages =
        new DownstreamHttpMessages(registrationIdForTest, null)
            .setContentAvailable(true)
            .setNotification(this.getDownstreamHttpNotificationAndroid())
            .setData(this.getDownstreamHttpData())
            .setDryRun(false);

    FcmSender fcmSender = new FcmSender(authKeyForTest);
    DownstreamHttpResponse downstreamHttpResponse =
        fcmSender.sendNotification(downstreamHttpMessages);
    LOGGER.debug(downstreamHttpResponse.toString());

    assertThat("Fail to send notification.", true, is(downstreamHttpResponse.isSuccess()));
    assertThat("Fail to send notification.", false, is(downstreamHttpResponse.isFailure()));
    assertThat(
        "Result is null or empty.",
        false,
        is(CollectionUtil.isNullOrEmpty(downstreamHttpResponse.getResults())));
  }

  @Test
  public void validationForNoParameter() throws Exception {
    thrown.expect(ValidationException.class);
    thrown.expectMessage("DownstreamHttpMessages can not be null!");

    new FcmSender(authKeyForTest).sendNotification(null);
  }

  @Test
  public void validationForLackOfRegistrationId() throws Exception {
    thrown.expect(ValidationException.class);
    thrown.expectMessage("Must be either to or registration id!");

    DownstreamHttpMessages downstreamHttpMessages =
        new DownstreamHttpMessages(null, null)
            .setContentAvailable(true)
            .setNotification(this.getDownstreamHttpNotificationAndroid())
            .setDryRun(false);

    new FcmSender(authKeyForTest).sendNotification(downstreamHttpMessages);
  }
}
